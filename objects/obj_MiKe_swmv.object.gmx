<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MiKe_swstand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

sprite_index = spr_MiKe_swstand;
image_index = 0;
image_speed = 0.3;

dir = 1;

V = 0;
SV = 2;
DV = 1;
MV = 4;

verV = 0;
verSV = 2;
verDV = 1;
verMV = 4;

DeAcc = false;
verDeAcc = false;

vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step (Animations)

var ver, verre, ver1, verre1, hor, horre, hor1, horre1

ver = (keyboard_check(vk_down) or gamepad_button_check(0,gp_padd));
verre = (keyboard_check_released(vk_down) or gamepad_button_check_released(0,gp_padd));
ver1 = (keyboard_check(vk_up) or gamepad_button_check(0,gp_padu));
verre1 = (keyboard_check_released(vk_up) or gamepad_button_check_released(0,gp_padu));
hor = (keyboard_check(vk_down) or gamepad_button_check(0,gp_padd));
horre = (keyboard_check_released(vk_down) or gamepad_button_check_released(0,gp_padd));
hor1 = (keyboard_check(vk_up) or gamepad_button_check(0,gp_padu));
horre1 = (keyboard_check_released(vk_up) or gamepad_button_check_released(0,gp_padu));

//vertical

if ver{
    sprite_index = spr_MiKe_swstand;
    image_speed = 0.6;
    image_index = image_index;
}

if verre{
    sprite_index = spr_swimming_nomv;
    image_speed = 0.3;
    image_index = image_index;
}

if ver1{
    sprite_index = spr_MiKe_swstand;
    image_speed = 0.6;
    image_index = image_index;
}

if verre1{
    sprite_index = spr_swimming_nomv;
    image_speed = 0.3;
    image_index = image_index;
}

//Now horizonatl

if hor{
    sprite_index = spr_MiKe_swmv;
    image_speed = 0.6;
    image_index = image_index;
}

if horre{
    sprite_index = spr_MiKe_swstand;
    image_speed = 0.3;
    image_index = image_index;
}

if hor1{
    sprite_index = spr_MiKe_swmv;
    image_speed = 0.6;
    image_index = image_index;
}

if horre1{
    sprite_index = spr_MiKe_swstand;
    image_speed = 0.3;
    image_index = image_index;
}

//directional stoff

if keyboard_check_pressed(vk_left){
    dir = -1;
}

if keyboard_check_pressed(vk_right){
    dir = 1;
}

if dir = 1{
    image_xscale = 1;
}

if dir = -1{
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step (Movement)

///Movement two cuz why not

if (obj_Pause.Pause = false){

if keyboard_check(vk_right) &amp;&amp; place_free(x+(MV+SV),y){
    DeAcc = false;
    if V &lt;= MV{
        V += SV;
    }
    hspeed = 0;
}

if keyboard_check(vk_left) &amp;&amp; place_free(x-(MV-SV),y){
    DeAcc = false;
    if V &gt;= -MV{
        V -= SV;
    }
    hspeed = 0;
}

if keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_left){
    V = 0;
    hspeed = 0;
}

if !place_free(x+MV,y){
    if keyboard_check(vk_right){
        V = 0;
    }
}

if !place_free(x-MV,y){
    if keyboard_check(vk_left){
        V = 0;
    }
}

}

if keyboard_check_released(vk_right){
    DeAcc = true;
}

if keyboard_check_released(vk_left){
    DeAcc = true;
}

if DeAcc = true{
    if V &lt;= -0.5 and !keyboard_check(vk_left) {V += DV}
    if V &gt;= 0.5 and !keyboard_check(vk_right) {V -= DV}
}

if DeAcc = true &amp;&amp; V = 0.5{
    V = 0;
}
if DeAcc = true &amp;&amp; V = -0.5{
    V = 0;
}

x += V;

if V &gt;= MV{
    V = MV
}

if V &lt;= -MV{
    V = -MV
}

//Smae but vertical

if (obj_Pause.Pause = false){

if keyboard_check(vk_down) &amp;&amp; place_free(x,y+(verMV+verSV)){
    verDeAcc = false;
    if verV &lt;= MV{
        verV += SV;
    }
    vspeed = 0;
}

if keyboard_check(vk_up) &amp;&amp; place_free(x,y-(verMV-verSV)){
    verDeAcc = false;
    if verV &gt;= -verMV{
        verV -= verSV;
    }
    vspeed = 0;
}

if keyboard_check(vk_down) &amp;&amp; keyboard_check(vk_up){
    verV = 0;
    vspeed = 0;
}

if !place_free(x+verMV,y){
    if keyboard_check(vk_down){
        verV = 0;
    }
}

if !place_free(x-verMV,y){
    if keyboard_check(vk_up){
        verV = 0;
    }
}

}

if keyboard_check_released(vk_down){
    verDeAcc = true;
}

if keyboard_check_released(vk_up){
    verDeAcc = true;
}

if verDeAcc = true{
    if verV &lt;= -0.5 and !keyboard_check(vk_down) {verV += verDV}
    if verV &gt;= 0.5  and !keyboard_check(vk_up)   {verV -= verDV}
}

if verDeAcc = true &amp;&amp; verV = 0.5{
    verV = 0;
}
if verDeAcc = true &amp;&amp; verV = -0.5{
    verV = 0;
}

y += verV;

if verV &gt;= verMV{
    verV = verMV
}

if verV &lt;= -verMV{
    verV = -verMV
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bg_block_GHZ">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

move_contact_solid(direction,6)
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
