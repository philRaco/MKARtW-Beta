<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MKmvanidle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

image_speed = 0.3;
hspeed = 0;

aerial = false;
DeAcc = false;

beL = 1;
beR = 1;

V = 0;
MV = 2;
SV = 2;
DV = 1;

state = 1;
global.metrvandir = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Left to righty

if keyboard_check(vk_right) &amp;&amp; (beR = 1){
    if DeAcc = true{
        V = 0
        DeAcc = false;
    }
    if (V &lt;= MV) &amp;&amp; (aerial = false){
        V += SV
        global.metrvandir = 1;
    }
}

if keyboard_check(vk_left) &amp;&amp; (beL = 1){
    if DeAcc = true{
        V = 0
        DeAcc = false;
    }
    if (V &gt;= -MV) &amp;&amp; (aerial = false){
        V -= SV
        global.metrvandir = -1;
    }
}

if keyboard_check_released(vk_left) or keyboard_check_released(vk_right){
    DeAcc = true;
}

if (DeAcc = true)  &amp;&amp; (aerial = false){
    if V &gt; 0 {V -= DV}
    if V &lt; 0 {V += DV}
}

x += V;

//Jumpy boi

if keyboard_check_pressed(ord('X')){
    if !place_free(x,y+1){
        vspeed -= 14;
    }
}

//Attackie boi

if keyboard_check_pressed(ord('S')){
    instance_create(x,y,obj_atkMK)
    obj_atkMK.vspeed = self.vspeed
    obj_atkMK.hspeed = self.V
    instance_destroy();
}

//collsion away

if !place_free(x+5,y){
    beR = 0;
} else {
    beR = 1;
}

if !place_free(x-5,y){
    beL = 0;
} else {
    beL = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animations

switch(global.metrvandir){
    case -1:
        image_xscale = -1;
    break;
    
    case 1:
        image_xscale = 1;
    break;
}

if aerial = false{
    if (V &gt; 0) or (V &lt; 0){
        image_speed = 0.5
        sprite_index = spr_MKmvanmoving;
    }

    if (V = 0){
        image_speed = 0.3;
        sprite_index = spr_MKmvanidle;
    }
} else if aerial = true{
    image_speed = 0.8;
    sprite_index = spr_MKmvanjumping;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gravity and Collision

if place_free(x,y+1){
    gravity = 1.2
}
else{
    gravity = 0
}

if !place_free(x,y+2){
    aerial = false;
} else {
    aerial = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bg_block_GHZ">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collis
vspeed = 0;
move_contact_solid(270,12)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
